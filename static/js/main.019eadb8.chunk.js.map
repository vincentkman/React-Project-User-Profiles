{"version":3,"sources":["components/User/User.js","components/UserInfo/UserInfo.js","App.js","serviceWorker.js","index.js"],"names":["capitalise1stLetter","string","charAt","toUpperCase","substr","toLowerCase","User","props","className","src","picture","alt","lastname","firstname","gender","city","postcode","email","dob","split","reverse","join","phone","country","UserInfo","state","users","fetch","then","res","json","resData","setState","results","catch","err","console","log","this","map","user","key","id","value","large","name","first","last","location","date","cell","nat","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAGA,SAASA,EAAoBC,GACzB,OAAOA,EAAOC,OAAO,GAAGC,cACpBF,EAAOG,OAAO,GAAGC,cA4BVC,MAjBf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAMG,QAASC,IAAKJ,EAAMK,WACpC,2CAAiBZ,EAAoBO,EAAMM,YAC3C,0CAAgBb,EAAoBO,EAAMK,WAC1C,uCAAaZ,EAAoBO,EAAMO,SACvC,qCAAWd,EAAoBO,EAAMQ,OACrC,yCAAeR,EAAMS,UACrB,sCAAYT,EAAMU,OAClB,oCAAqBV,EAAMW,IAhB9Bd,OAAO,EAAG,IACVe,MAAM,KACNC,UACAC,KAAK,MAcF,sCAAYd,EAAMe,MAAMH,MAAM,MAC9B,wCAAcZ,EAAMgB,WCuBjBC,E,YA7Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,IAHG,E,iFAOO,IAAD,OAClBC,MAAM,gDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,MAAOK,EAAQE,aAGlBC,OAAM,SAAAC,GACLC,QAAQC,IAAI,mCAAoCF,Q,+BAKpD,OACI,yBAAK3B,UAAU,YAEX8B,KAAKb,MAAMC,MAAMa,KAAI,SAAAC,GAAI,OACvB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GAAGC,MACbjC,QAAS8B,EAAK9B,QAAQkC,MACtB/B,UAAW2B,EAAKK,KAAKC,MACrBlC,SAAU4B,EAAKK,KAAKE,KACpBjC,OAAQ0B,EAAK1B,OACbC,KAAMyB,EAAKQ,SAASjC,KACpBC,SAAUwB,EAAKQ,SAAShC,SACxBC,MAAOuB,EAAKvB,MACZC,IAAKsB,EAAKtB,IAAI+B,KACd3B,MAAOkB,EAAKU,KACZ3B,QAASiB,EAAKW,c,GArCPC,IAAMC,WCOdC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.019eadb8.chunk.js","sourcesContent":["import React from 'react';\nimport './user.scss';\n\nfunction capitalise1stLetter(string) {\n    return string.charAt(0).toUpperCase() +\n        string.substr(1).toLowerCase()\n}\n\nfunction removeChar(string) {\n    return string\n        .substr(0, 10)\n        .split('-')\n        .reverse()\n        .join('-');\n}\n\nfunction User(props) {\n    return (\n        <div className='User'>\n            <img src={props.picture} alt={props.lastname} />\n            <h3>First Name: {capitalise1stLetter(props.firstname)}</h3>\n            <h3>Last Name: {capitalise1stLetter(props.lastname)}</h3>\n            <h3>Gender: {capitalise1stLetter(props.gender)}</h3>\n            <h3>City: {capitalise1stLetter(props.city)}</h3>\n            <h3>Postcode: {props.postcode}</h3>\n            <h3>Email: {props.email}</h3>\n            <h3>DOB: {removeChar(props.dob)}</h3>\n            <h3>Phone: {props.phone.split('-')}</h3>\n            <h3>Country: {props.country}</h3>\n        </div>\n    );\n}\n\nexport default User; ","import React from 'react';\nimport './userinfo.scss';\n\nimport User from '../User/User';\n\nclass UserInfo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      users: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=10&nat=gb')\n      .then(res => res.json())\n      .then(resData => {\n        this.setState({\n          users: resData.results\n        })\n      })\n      .catch(err => {\n        console.log('Error fetching and parsing error', err)\n      })\n  }\n\n  render() {\n    return (\n        <div className=\"userinfo\">\n          {\n            this.state.users.map(user => (\n              <User\n                key={user.id.value}\n                picture={user.picture.large}\n                firstname={user.name.first}\n                lastname={user.name.last}\n                gender={user.gender}\n                city={user.location.city}\n                postcode={user.location.postcode}\n                email={user.email}\n                dob={user.dob.date}\n                phone={user.cell}\n                country={user.nat}\n              />\n            ))\n          }\n        </div>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React from 'react';\nimport './App.scss';\nimport UserInfo from './components/UserInfo/UserInfo';\n\nfunction App() {\n  return (\n    <div>\n      <UserInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}